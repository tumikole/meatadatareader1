{"version":3,"sources":["Components/FormData.js","App.js","reportWebVitals.js","index.js"],"names":["FormData","_useState","useState","_useState2","Object","slicedToArray","selectedFile","setSelectedFile","_useState3","_useState4","files","setFilesList","_useState5","_useState6","image","setImage","react_default","a","createElement","onSubmit","e","preventDefault","file","document","getElementsByName","blob","URL","createObjectURL","name","type","size","concat","toConsumableArray","console","log","handleSubmission","reactstrap_module","onChange","target","style","color","data","width","height","tag","map","val","onClick","props","onClickShow","outline","sm","body","className","disabled","href","App","textAlign","padding","Components_FormData","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","src_App","getElementById"],"mappings":"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","file":"static/js/main.80fa0aa7.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport { Card, CardBody, CardTitle, Button, Row, Col, CardText, FormGroup, Label, Input } from \"reactstrap\";\n\nfunction FormData() {\n  const [selectedFile, setSelectedFile] = useState({});\n  const [files, setFilesList] = useState([]);\n  \t const [image,  setImage] = useState(\"\")\n\nconst handleChange = (e) =>{\n       setImage(URL.createObjectURL(e.target.files[0]))\n     }\n\n  const onClickShow = (props) => {\n    const { name, type, size, blob} = props;\n    console.log(`props`, props);\n    setSelectedFile({\n      name,\n      type,\n      size,\n      blob\n    });\n  };\n\n  const handleSubmission = (e) => {\n    e.preventDefault();\n    let file = document.getElementsByName(\"file\")[0].files[\"0\"];\n    let blob =  URL.createObjectURL(file)\n    const { name, type, size } = file;\n    if (name && type && size) {\n        setFilesList([\n            ...files,\n            {\n                name: file.name,\n                type: file.type,\n                size: file.size,\n                blob: blob\n          \n        },\n      ]);\n\n      console.log(\"tumisang\", blob)\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={(e) => handleSubmission(e)}>\n        <FormGroup>\n    <Input\n      type=\"file\" name=\"file\" \n      onChange={handleChange}\n    />\n    </FormGroup>\n\n        <div>\n          <Button>Submit</Button>\n        </div>\n      </form>\n\n      <div>\n  <Card\n  >\n    <CardBody>\n        <h5 style={{color:\"red\"}}>Choosen file</h5>\n    <div>\n    <object data={image} type=\"application/pdf\" width=\"100%\" height=\"100%\"></object>\n    </div>\n\n      <CardTitle tag=\"h1\">\n      <h4>Click on file name to show file information</h4>\n{files.map((val) => {\n            return  <Button onClick={() => onClickShow(val)}  color=\"success\"\n    outline style={{color:\"red\"}}>File Name: {val.name}</Button>;\n          })}     \n<div>\n \n</div>\n          \n           </CardTitle>\n       \n    </CardBody>\n  </Card>\n</div>\n\n\n<Row >\n  <Col sm=\"12\">\n    <Card body >\n      <CardTitle tag=\"h5\">\nFile Information     \n </CardTitle>\n      <CardText className=\"CardText\">\n <Button disabled color=\"success\" outline>Name: {selectedFile.name}</Button>\n <br />\n          <Button disabled color=\"info\" outline>Type: {selectedFile.type}</Button>\n           <br />\n\n          <Button disabled color=\"warning\" outline>Size: {selectedFile.size}</Button>\n                    {/* <Button disabled color=\"warning\" outline>Blob: {selectedFile}</Button> */}\n                    <Button color=\"danger\" target=\"_blank\" href={selectedFile.blob} outline>{selectedFile.blob}</Button>\n\n\n\n      </CardText>\n      \n    </Card>\n  </Col>\n \n</Row>\n    </div>\n  );\n}\n\nexport default FormData;","import React from 'react';\nimport './App.css';\nimport FormData from './Components/FormData'\n\nfunction App() {\n\n  return (\n    <div style={{height:\"100vh\"}} className=\"AppBody\">\n    <h1 style={{textAlign:\"center\", padding:\"3rem\"}}>File Meta-Data Reader App</h1>\n    <div className=\"App\">\n    <div className=\"AppComponents\">\n      <FormData/>\n      </div>\n    </div>\n\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}